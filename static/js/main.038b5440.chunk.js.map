{"version":3,"sources":["Visualizer/Graph.jsx","App.js","serviceWorker.js","index.js"],"names":["Graph","props","state","array","numRows","Button","variant","color","onClick","resetArray","Slider","className","min","max","step","defaultValue","this","onChangeCommitted","e","val","setState","Box","map","num","index","width","height","key","style","backgroundColor","i","push","Math","floor","random","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8UASqBA,G,wDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEC,MAAO,GAAIC,QAAS,IAFpB,E,qDAKT,IAAD,OACL,OACI,6BAEI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAM,EAAKC,eAAhE,wBAEA,kBAACC,EAAA,EAAD,CAAQC,UAAU,eAAeC,IAAK,EAAGC,IAAK,IAAKC,KAAM,EAAGC,aAAcC,KAAKd,MAAME,QACrFa,kBAAoB,SAACC,EAAGC,GACpB,EAAKC,SAAS,CAAChB,QAASe,IACxB,EAAKV,gBAET,kBAACY,EAAA,EAAD,CAAKV,UAAU,gBACVK,KAAKd,MAAMC,MAAMmB,KAAI,SAACC,EAAKC,GAAN,OAClB,kBAACH,EAAA,EAAD,CAAKV,UAAU,WACXc,MAAO,EAAE,EAAKvB,MAAME,QACpBsB,OAAQH,EAAI,IACZI,IAAKH,EACLI,MAAO,CACHC,gBA1Bd,sB,0CAmCVb,KAAKP,e,mCAKL,IADA,IAOqBG,EAAKC,EAPpBV,EAAQ,GACN2B,EAAI,EAAGA,EAAId,KAAKd,MAAME,QAAS0B,IACnC3B,EAAM4B,MAKWnB,EALc,GAKTC,EALa,IAMpCmB,KAAKC,MAAMD,KAAKE,UAAYrB,EAAMD,EAAM,GAAKA,KALhDI,KAAKI,SAAS,CAACjB,c,GAxCYgC,IAAMC,Y,MCG1BC,MARf,WACE,OACE,yBAAK1B,UAAU,OACX,kBAAC,EAAD,QCKY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.038b5440.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport './Graph.css'\r\n\r\n\r\nconst BAR_COLOR = 'turquoise';\r\n\r\nexport default class Graph extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { array: [], numRows: 64};\r\n    }\r\n    \r\n    render() {\r\n        return( \r\n            <div>\r\n                {/*Button to re-randomize numbers*/}\r\n                <Button variant='contained' color='primary' onClick={() => this.resetArray()}>Generate New Numbers</Button>\r\n                {/*Slider to control how many numbers to sort*/}\r\n                <Slider className='numberSlider' min={8} max={256} step={8} defaultValue={this.state.numRows}\r\n                onChangeCommitted={ (e, val) => {\r\n                    this.setState({numRows: val});\r\n                    this.resetArray();\r\n                }}></Slider>\r\n                <Box className=\"barContainer\">\r\n                    {this.state.array.map((num, index) => (\r\n                        <Box className='graphBar' \r\n                            width={1/this.state.numRows} \r\n                            height={num/1000}\r\n                            key={index} \r\n                            style={{\r\n                                backgroundColor: BAR_COLOR\r\n                        }}></Box>\r\n                    ))}\r\n                </Box>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < this.state.numRows; i++)\r\n            array.push(randomIntOnInterval(50, 1000));\r\n        this.setState({array})\r\n    }\r\n}\r\n\r\nfunction randomIntOnInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\nimport Graph from './Visualizer/Graph';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Graph></Graph>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}