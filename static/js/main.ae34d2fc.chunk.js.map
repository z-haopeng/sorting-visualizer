{"version":3,"sources":["Visualizer/Graph.jsx","App.js","serviceWorker.js","index.js"],"names":["Graph","props","handleResize","e","setState","isLandscape","window","innerWidth","innerHeight","state","array","numRows","algorithm","this","Box","mt","display","flexDirection","mx","justifyContent","Button","variant","startIcon","href","alignItems","p","color","onClick","resetArray","InputLabel","shrink","id","Select","labelId","defaultValue","onChange","event","changeAlgorithm","MenuItem","value","m","width","maxWidth","Typography","align","Slider","min","max","step","valueLabelDisplay","onChangeCommitted","val","height","map","num","index","key","position","bottom","style","backgroundColor","addEventListener","target","i","push","Math","floor","random","React","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae34d2fc.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\n\r\nconst BAR_COLOR = '#81d4fa';\r\n\r\nconst BUBBLE_SORT = 0;\r\nconst INSERTION_SORT = 1;\r\nconst MERGE_SORT = 2;\r\n\r\nexport default class Graph extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            array: [], \r\n            numRows: 64, \r\n            algorithm: BUBBLE_SORT,\r\n            isLandscape: window.innerWidth > window.innerHeight};\r\n    }\r\n    \r\n    render() {\r\n        if(this.state.isLandscape)\r\n            return(\r\n                <div>\r\n                    <Box mt={1} display='flex' flexDirection='column' mx='auto'>\r\n                        <Box display='flex' justifyContent='center'>\r\n                            <Button variant='outlined' startIcon={<GitHubIcon />} href='https://github.com/z-haopeng/sorting-visualizer'>View On GitHub</Button>\r\n                        </Box>\r\n                        <Box display='flex' justifyContent='center' alignItems='flex-end'>\r\n                            {/*Button to re-randomize numbers*/}\r\n                            <Box p={1}>\r\n                                <Button variant='contained' color='primary' onClick={() => this.resetArray()}>Randomize Set</Button>\r\n                            </Box>  \r\n                            <Box p={1} display='flex' flexDirection='column'>\r\n                                <InputLabel shrink id='algorithmLabel'>Algorithm</InputLabel>\r\n                                <Select labelId='algorithmLabel' defaultValue={BUBBLE_SORT} onChange={(event) => this.changeAlgorithm(event)}>\r\n                                    <MenuItem value={BUBBLE_SORT}>Bubble Sort</MenuItem>\r\n                                    <MenuItem value={INSERTION_SORT}>Insertion Sort</MenuItem>\r\n                                    <MenuItem value={MERGE_SORT}>Merge Sort</MenuItem>\r\n                                </Select>\r\n                            </Box>\r\n                            {/*Button to initiate sort*/}\r\n                            <Box p={1}>  \r\n                                <Button variant='contained' color='secondary'>Sort!</Button>\r\n                            </Box>  \r\n                        </Box>\r\n                        {/*Slider to control how many numbers to sort*/}\r\n                        <Box mx='auto' m={1} width='512px' maxWidth='75%'>\r\n                            <Typography align='left'>Size of Set</Typography>\r\n                            <Slider min={8} max={256} step={8} defaultValue={64} valueLabelDisplay='auto'\r\n                            onChangeCommitted={ (e, val) => {\r\n                                this.setState({numRows: val});\r\n                                this.resetArray();\r\n                            }}></Slider>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box mx='auto' height='50vh' width='1024px' maxWidth='100%'>\r\n                        {this.state.array.map((num, index) => (\r\n                            <Box \r\n                            display='inline-block'\r\n                            width={1/this.state.numRows} \r\n                            key={index}\r\n                            height='100%'\r\n                            position='relative'\r\n                            >\r\n                                <Box\r\n                                    position='absolute'\r\n                                    bottom={0}\r\n                                    height={num/1024}\r\n                                    width='100%'\r\n                                    style={{\r\n\r\n                                        backgroundColor: BAR_COLOR\r\n                                }}></Box>\r\n                            </Box>\r\n                        ))}\r\n                    </Box>\r\n                </div>\r\n            );\r\n\r\n        return( \r\n            <div>\r\n                <Box mt={1} display='flex' flexDirection='column' mx='auto'>\r\n                    <Box display='flex' justifyContent='center'>\r\n                        <Button variant='outlined' startIcon={<GitHubIcon />} href='https://github.com/z-haopeng/sorting-visualizer'>View On GitHub</Button>\r\n                    </Box>\r\n                    <Box display='flex' justifyContent='center'> \r\n                        {/*Button to re-randomize numbers*/}\r\n                        <Box p={1}>\r\n                            <Button variant='contained' color='primary' onClick={() => this.resetArray()}>Randomize Set</Button>\r\n                        </Box>  \r\n                        {/*Button to initiate sort*/}\r\n                        <Box p={1}>  \r\n                            <Button variant='contained' color='secondary'>Sort!</Button>\r\n                        </Box>     \r\n                    </Box>\r\n                    <Box display='flex' justifyContent='center'>\r\n                        <Box display='flex' flexDirection='column'>\r\n                            <InputLabel shrink id='algorithmLabel'>Algorithm</InputLabel>\r\n                            <Select labelId='algorithmLabel' defaultValue={BUBBLE_SORT} onChange={(event) => this.changeAlgorithm(event)}>\r\n                                <MenuItem value={BUBBLE_SORT}>Bubble Sort</MenuItem>\r\n                                <MenuItem value={INSERTION_SORT}>Insertion Sort</MenuItem>\r\n                                <MenuItem value={MERGE_SORT}>Merge Sort</MenuItem>\r\n                            </Select>\r\n                        </Box>\r\n                    </Box>\r\n                    {/*Slider to control how many numbers to sort*/}\r\n                    <Box mx='auto' m={1} width='512px' maxWidth='75%'>\r\n                        <Typography align='left'>Size of Set</Typography>\r\n                        <Slider min={8} max={256} step={8} defaultValue={64} valueLabelDisplay='auto'\r\n                        onChangeCommitted={ (e, val) => {\r\n                            this.setState({numRows: val});\r\n                            this.resetArray();\r\n                        }}></Slider>\r\n                    </Box>\r\n                </Box>             \r\n                <Box mx='auto' height='50vh' width='1024px' maxWidth='100%'>\r\n                    {this.state.array.map((num, index) => (\r\n                        <Box \r\n                        display='inline-block'\r\n                        width={1/this.state.numRows} \r\n                        key={index}\r\n                        height='100%'\r\n                        position='relative'\r\n                        >\r\n                            <Box\r\n                                position='absolute'\r\n                                bottom={0}\r\n                                height={num/1024}\r\n                                width='100%'\r\n                                style={{\r\n                                    backgroundColor: BAR_COLOR\r\n                            }}></Box>\r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    handleResize = e => {\r\n        this.setState({isLandscape: window.innerWidth > window.innerHeight});\r\n    }\r\n\r\n    changeAlgorithm(event) {\r\n        this.setState({algorithm: event.target.value});\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < this.state.numRows; i++)\r\n            array.push(randomIntOnInterval(64, 1024));\r\n        this.setState({array})\r\n    }\r\n}\r\n\r\nfunction randomIntOnInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\nimport Graph from './Visualizer/Graph';\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Graph></Graph>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}