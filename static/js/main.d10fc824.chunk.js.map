{"version":3,"sources":["Algorithms/BubbleSort.js","Algorithms/InsertionSort.js","Algorithms/MergeSort.js","Algorithms/QuickSort.js","Visualizer/Graph.jsx","App.js","serviceWorker.js","index.js"],"names":["swap","array","a","b","length","temp","getMergeSortAnimations","result","slice","animations","mergeAnimationHelper","auxillaryArray","start","end","middle","Math","floor","headOne","headTwo","i","push","COMPARISON_COLOR","BAR_COLOR","SORTED_COLOR","mergeAnimate","getQuickSortArray","quickSortHelper","low","high","pivotIdx","pivot","j","partition","getQuickSortAnimations","animationHelper","console","log","timeouts","Graph","props","state","numRows","algorithm","isLandscape","window","innerWidth","innerHeight","sorting","this","Box","mt","display","flexDirection","mx","justifyContent","Button","variant","startIcon","href","alignItems","p","disabled","color","onClick","resetArray","InputLabel","shrink","id","Select","labelId","defaultValue","onChange","event","changeAlgorithm","MenuItem","value","sort","m","width","maxWidth","Typography","align","Slider","min","max","step","valueLabelDisplay","onChangeCommitted","e","val","setState","height","map","num","index","key","position","className","bottom","style","backgroundColor","addEventListener","handleResize","document","escapeAnimation","removeEventListener","clearTimeout","target","arrayOfBars","getElementsByClassName","random","bubbleAnimations","getBubbleSortAnimations","animate","insertionAnimations","getInsertionSortAnimations","mergeAnimations","quickAnimations","delay","exponent","efficiency","timeFactor","processingTime","scaleFactor","pow","indices","changes","setTimeout","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d10fc824.chunk.js","sourcesContent":["import {BAR_COLOR, COMPARISON_COLOR} from '../Visualizer/Graph'\r\n\r\nexport function getBubbleSortArray(array) {\r\n    let result = array.slice(0);\r\n    for(let i = 0; i < result.length-1; i++) {\r\n        for(let j = 0; j < result.length-i-1; j++) {\r\n            if(result[j] > result[j+1]) {\r\n                swap(result, j, j+1);\r\n            }    \r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n    let animations = [];\r\n    let temp = array.slice(0);\r\n    for(let i = 0; i < temp.length-1; i++) {\r\n        for(let j = 0; j < temp.length-i-1; j++) {\r\n            // Blocks of information with three parts: \r\n            // Two indices to consider and whether to change color or swap\r\n            // true: toggle colors, false: swap heights\r\n            animations.push([[j, j+1], [COMPARISON_COLOR, COMPARISON_COLOR], true]);\r\n            if(temp[j] > temp[j+1]) {\r\n                animations.push([[j, j+1], [temp[j+1], temp[j]], false]);\r\n                swap(temp, j, j+1);\r\n            }\r\n            animations.push([[j, j+1], [BAR_COLOR, BAR_COLOR], true]);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction swap(array, a, b) {\r\n    if(array != null && a < array.length && b < array.length) {\r\n        let temp = array[a];\r\n        array[a] = array[b];\r\n        array[b] = temp;\r\n    }\r\n}","import {BAR_COLOR, COMPARISON_COLOR} from '../Visualizer/Graph'\r\n\r\nexport function getInsertionSortArray(array) {\r\n    let result = array.slice(0);\r\n    for(let i = 1; i < result.length; i++) {\r\n        let j = i;\r\n        while(j > 0 && result[j-1] > result[j]) {\r\n            swap(result, j-1, j);\r\n            j--;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function getInsertionSortAnimations(array) {\r\n    let animations = [];\r\n    let temp = array.slice(0);\r\n    for(let i = 1; i < temp.length; i++) {\r\n        let j = i;\r\n        animations.push([[j-1, j], [COMPARISON_COLOR, COMPARISON_COLOR], true]);        // Highlight compared indices\r\n        while(j > 0 && temp[j-1] > temp[j]) {\r\n            animations.push([[j-1, j], [temp[j], temp[j-1]], false]);   // Swap their heights\r\n            animations.push([[j-1, j], [BAR_COLOR, BAR_COLOR], true]);    // Un-highlight those indices\r\n            swap(temp, j-1, j);\r\n            j--;\r\n            if(j > 0) {\r\n                animations.push([[j-1, j], [COMPARISON_COLOR, COMPARISON_COLOR], true]);// Highlight the next pair\r\n            }\r\n        }\r\n        if(j > 0) {\r\n            animations.push([[j-1, j], [BAR_COLOR, BAR_COLOR], true]);    // Un-highlight the final pair\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\n\r\nfunction swap(array, a, b) {\r\n    if(array != null && a < array.length && b < array.length) {\r\n        let temp = array[a];\r\n        array[a] = array[b];\r\n        array[b] = temp;\r\n    }\r\n}","import {BAR_COLOR, COMPARISON_COLOR, SORTED_COLOR} from '../Visualizer/Graph'\r\n\r\nexport function getMergeSortArray(array) {\r\n    let result = array.slice(0);\r\n    let auxillaryArray = array.slice(0);\r\n    mergeSortHelper(result, auxillaryArray, 0, result.length-1);\r\n    return result;\r\n}\r\n\r\nfunction mergeSortHelper(array, auxillaryArray, start, end) {\r\n    if(start === end) {\r\n        return;\r\n    }\r\n    let middle = Math.floor((start+end)/2);\r\n    // end must be at least 1 greater than start here, so divide again\r\n    mergeSortHelper(array, auxillaryArray, start, middle);\r\n    mergeSortHelper(array, auxillaryArray, middle+1, end);\r\n    merge(array, auxillaryArray, start, middle, end);\r\n}\r\n\r\nfunction merge(array, auxillaryArray, start, middle, end) {\r\n    let headOne = start;\r\n    let headTwo = middle+1;\r\n    // The two halves must be in order, so merge them\r\n    for(let i = start; i <= end; i++) {\r\n        // Four possibilities:\r\n        // The first list has already been entirely merged\r\n        if(headOne > middle) {\r\n            auxillaryArray[i] = array[headTwo];\r\n            headTwo++;\r\n        // The second list has already been entirely merged\r\n        } else if(headTwo > end) {\r\n            auxillaryArray[i] = array[headOne];\r\n            headOne++;\r\n        // The head of the first list should go in next\r\n        } else if(array[headOne] < array[headTwo]) {\r\n            auxillaryArray[i] = array[headOne];\r\n            headOne++;\r\n        // The head of the second list should go in next\r\n        } else {\r\n            auxillaryArray[i] = array[headTwo];\r\n            headTwo++;\r\n        }\r\n    }\r\n    // Copy the merged arrays back into the original\r\n    for(let i = start; i <= end; i++) {\r\n        array[i] = auxillaryArray[i];\r\n    }\r\n}\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    let result = array.slice(0);\r\n    let auxillary = array.slice(0);\r\n    let animations = [];\r\n\r\n    mergeAnimationHelper(result, auxillary, 0, result.length-1, animations);\r\n\r\n    return animations;\r\n}\r\n\r\nfunction mergeAnimationHelper(array, auxillaryArray, start, end, animations) {\r\n    if(start === end) {\r\n        return;\r\n    }\r\n    let middle = Math.floor((start+end)/2);\r\n    // end must be at least 1 greater than start here, so divide again\r\n    mergeAnimationHelper(array, auxillaryArray, start, middle, animations);\r\n    mergeAnimationHelper(array, auxillaryArray, middle+1, end, animations);\r\n    mergeAnimate(array, auxillaryArray, start, middle, end, animations);\r\n}\r\n\r\nfunction mergeAnimate(array, auxillaryArray, start, middle, end, animations) {\r\n    let headOne = start;\r\n    let headTwo = middle+1;\r\n    // The two halves must be in order, so merge them\r\n    for(let i = start; i <= end; i++) {\r\n        // Four possibilities:\r\n        // The first list has already been entirely merged\r\n        if(headOne > middle) {\r\n            animations.push([[headTwo], [COMPARISON_COLOR], true]);     // Highlight the bar\r\n            animations.push([[headTwo], [BAR_COLOR], true]);            // Un-highlight the bar\r\n            auxillaryArray[i] = array[headTwo];\r\n            headTwo++;\r\n        // The second list has already been entirely merged\r\n        } else if(headTwo > end) {\r\n            animations.push([[headOne], [COMPARISON_COLOR], true]);\r\n            animations.push([[headOne], [BAR_COLOR], true]);\r\n            auxillaryArray[i] = array[headOne];\r\n            headOne++;\r\n        // The head of the first list should go in next\r\n        } else if(array[headOne] < array[headTwo]) {\r\n            animations.push([[headOne], [COMPARISON_COLOR], true]);\r\n            animations.push([[headOne], [BAR_COLOR], true]);\r\n            auxillaryArray[i] = array[headOne];\r\n            headOne++;\r\n        // The head of the second list should go in next\r\n        } else {\r\n            animations.push([[headTwo], [COMPARISON_COLOR], true]);\r\n            animations.push([[headTwo], [BAR_COLOR], true]);\r\n            auxillaryArray[i] = array[headTwo];\r\n            headTwo++;\r\n        }\r\n    }\r\n    // Copy the merged arrays back into the original\r\n    for(let i = start; i <= end; i++) {\r\n        array[i] = auxillaryArray[i];\r\n        animations.push([[i], [SORTED_COLOR], true]);\r\n        animations.push([[i], [array[i]], false]);\r\n        animations.push([[i], [BAR_COLOR], true]);\r\n    }\r\n}","import {BAR_COLOR, COMPARISON_COLOR, SORTED_COLOR} from '../Visualizer/Graph';\r\n\r\nexport function getQuickSortArray(array) {\r\n    let result = array.slice(0);\r\n    quickSortHelper(result, 0, result.length-1);\r\n    return result;\r\n}\r\n\r\nfunction quickSortHelper(array, low, high) {\r\n    if(low >= high)\r\n        return;\r\n\r\n    let pivotIdx = partition(array, low, high);\r\n\r\n    quickSortHelper(array, low, pivotIdx - 1);\r\n    quickSortHelper(array, pivotIdx + 1, high);\r\n\r\n}\r\n\r\nfunction partition(array, low, high) {\r\n    let pivot = array[low];\r\n    let i = low+1;\r\n    for(let j = low+1; j <= high; j++) {\r\n        if(array[j] < pivot) {\r\n            swap(array, i, j);\r\n            i++;\r\n        }\r\n    }\r\n    swap(array, i-1, low);\r\n    return i-1;\r\n}\r\n\r\nexport function getQuickSortAnimations(array) {\r\n    let result = array.slice(0);\r\n    let animations = [];\r\n    animationHelper(result, 0, result.length-1, animations);\r\n    console.log(result);\r\n    return animations;\r\n}\r\n\r\nfunction animationHelper(array, low, high, animations) {\r\n    if(low >= high)\r\n        return;\r\n\r\n    let pivot = array[low];\r\n    animations.push([[low], [SORTED_COLOR], true]);\r\n    let i = low;\r\n    for(let j = low+1; j <= high; j++) {\r\n        animations.push([[i+1, j], [COMPARISON_COLOR, COMPARISON_COLOR], true]);\r\n        if(array[j] < pivot) {\r\n            i++;\r\n            animations.push([[i, j], [array[j], array[i]], false]);\r\n            animations.push([[i, j], [BAR_COLOR, BAR_COLOR], true]);\r\n            swap(array, i, j);\r\n        } else if(j === high){\r\n            animations.push([[i+1, j], [BAR_COLOR, BAR_COLOR], true]);\r\n        } else {\r\n            animations.push([[j], [BAR_COLOR], true]);\r\n        }\r\n        \r\n    }\r\n    animations.push([[i], [SORTED_COLOR], true]);\r\n    animations.push([[i, low], [array[low], array[i]], false]);\r\n    animations.push([[i, low], [BAR_COLOR, BAR_COLOR], true]);\r\n    swap(array, i, low);\r\n\r\n    animationHelper(array, low, i-1, animations);\r\n    animationHelper(array, i+1, high, animations);\r\n}\r\n\r\nfunction swap(array, a, b) {\r\n    let temp = array[a];\r\n    array[a] = array[b];\r\n    array[b] = temp;\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\n\r\nimport {getBubbleSortAnimations} from '../Algorithms/BubbleSort';\r\nimport {getInsertionSortAnimations} from '../Algorithms/InsertionSort';\r\nimport {getMergeSortAnimations} from '../Algorithms/MergeSort';\r\nimport {getQuickSortAnimations, getQuickSortArray} from '../Algorithms/QuickSort';\r\n\r\nexport const BAR_COLOR = 'rgb(129, 212, 250)';\r\nexport const COMPARISON_COLOR = 'rgb(156, 39, 176)';\r\nexport const SORTED_COLOR = 'rgb(0, 200, 83)';\r\nconst FINAL_PASS_DELAY = 1.5;\r\nconst ANIMATIONS_PER_MS = 25;\r\nconst MAX_ROWS = 256;\r\nconst MAX_HEIGHT = 1024;\r\n\r\nconst BUBBLE_SORT = 0;\r\nconst INSERTION_SORT = 1;\r\nconst MERGE_SORT = 2;\r\nconst QUICK_SORT = 3;\r\n\r\nconst N_SQUARED = -1;\r\nconst N_LOG_N = -2;\r\n\r\nvar timeouts = [];\r\n\r\nexport default class Graph extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            array: [], \r\n            numRows: 64, \r\n            algorithm: BUBBLE_SORT,\r\n            isLandscape: window.innerWidth > window.innerHeight,\r\n            sorting: false};\r\n    }\r\n    \r\n    render() {\r\n        if(this.state.isLandscape)\r\n            return(\r\n                <div>\r\n                    <Box mt={1} display='flex' flexDirection='column' mx='auto'>\r\n                        <Box display='flex' justifyContent='center'>\r\n                            <Button variant='outlined' startIcon={<GitHubIcon />} href='https://github.com/z-haopeng/sorting-visualizer'>View On GitHub</Button>\r\n                        </Box>\r\n                        <Box display='flex' justifyContent='center' alignItems='flex-end'>\r\n                            {/*Button to re-randomize numbers*/}\r\n                            <Box p={1}>\r\n                                <Button disabled={this.state.sorting} variant='contained' color='primary' onClick={() => this.resetArray()}>Randomize</Button>\r\n                            </Box>  \r\n                            <Box p={1} display='flex' flexDirection='column'>\r\n                                <InputLabel shrink id='algorithmLabel'>Algorithm</InputLabel>\r\n                                <Select disabled={this.state.sorting} labelId='algorithmLabel' defaultValue={BUBBLE_SORT} onChange={(event) => this.changeAlgorithm(event)}>\r\n                                    <MenuItem value={BUBBLE_SORT}>Bubble Sort</MenuItem>\r\n                                    <MenuItem value={INSERTION_SORT}>Insertion Sort</MenuItem>\r\n                                    <MenuItem value={MERGE_SORT}>Merge Sort</MenuItem>\r\n                                    <MenuItem value={QUICK_SORT}>Quick Sort</MenuItem>\r\n                                </Select>\r\n                            </Box>\r\n                            {/*Button to initiate sort*/}\r\n                            <Box p={1}>  \r\n                                <Button disabled={this.state.sorting} variant='contained' color='secondary' onClick={() => this.sort()}>Sort!</Button>\r\n                            </Box>  \r\n                        </Box>\r\n                        {/*Slider to control how many numbers to sort*/}\r\n                        <Box mx='auto' m={1} width='512px' maxWidth='75%'>\r\n                            <Typography align='left'>Size of Array</Typography>\r\n                            <Slider disabled={this.state.sorting} min={8} max={MAX_ROWS} step={8} defaultValue={64} valueLabelDisplay='auto'\r\n                            onChangeCommitted={ (e, val) => {\r\n                                this.setState({numRows: val});\r\n                                this.resetArray();\r\n                            }}></Slider>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box mx='auto' height='50vh' width='1024px' maxWidth='100%'>\r\n                        {this.state.array.map((num, index) => (\r\n                            <Box \r\n                            display='inline-block'\r\n                            width={1/this.state.numRows} \r\n                            key={index}\r\n                            height='100%'\r\n                            position='relative'\r\n                            >\r\n                                <Box\r\n                                    className='bar'\r\n                                    position='absolute'\r\n                                    bottom={0}\r\n                                    width='100%'\r\n                                    style={{\r\n                                        height: `${num/10.24}%`,\r\n                                        backgroundColor: BAR_COLOR\r\n                                    }}></Box>\r\n                            </Box>\r\n                        ))}\r\n                    </Box>\r\n                </div>\r\n            );\r\n\r\n        return( \r\n            <div>\r\n                <Box mt={1} display='flex' flexDirection='column' mx='auto'>\r\n                    <Box display='flex' justifyContent='center'>\r\n                        <Button variant='outlined' startIcon={<GitHubIcon />} href='https://github.com/z-haopeng/sorting-visualizer'>View On GitHub</Button>\r\n                    </Box>\r\n                    <Box display='flex' justifyContent='center'> \r\n                        {/*Button to re-randomize numbers*/}\r\n                        <Box p={1}>\r\n                            <Button disabled={this.state.sorting} variant='contained' color='primary' onClick={() => this.resetArray()}>Randomize</Button>\r\n                        </Box>  \r\n                        {/*Button to initiate sort*/}\r\n                        <Box p={1}>  \r\n                            <Button disabled={this.state.sorting} variant='contained' color='secondary' onClick={() => this.sort()}>Sort!</Button>\r\n                        </Box>     \r\n                    </Box>\r\n                    <Box display='flex' justifyContent='center'>\r\n                        <Box display='flex' flexDirection='column'>\r\n                            <InputLabel shrink id='algorithmLabel'>Algorithm</InputLabel>\r\n                            <Select disabled={this.state.sorting} labelId='algorithmLabel' defaultValue={BUBBLE_SORT} onChange={(event) => this.changeAlgorithm(event)}>\r\n                                <MenuItem value={BUBBLE_SORT}>Bubble Sort</MenuItem>\r\n                                <MenuItem value={INSERTION_SORT}>Insertion Sort</MenuItem>\r\n                                <MenuItem value={MERGE_SORT}>Merge Sort</MenuItem>\r\n                                <MenuItem value={QUICK_SORT}>Quick Sort</MenuItem>\r\n                            </Select>\r\n                        </Box>\r\n                    </Box>\r\n                    {/*Slider to control how many numbers to sort*/}\r\n                    <Box mx='auto' m={1} width='512px' maxWidth='75%'>\r\n                        <Typography align='left'>Size of Array</Typography>\r\n                        <Slider disabled={this.state.sorting} min={8} max={MAX_ROWS} step={8} defaultValue={64} valueLabelDisplay='auto'\r\n                        onChangeCommitted={ (e, val) => {\r\n                            this.setState({numRows: val});\r\n                            this.resetArray();\r\n                        }}></Slider>\r\n                    </Box>\r\n                </Box>             \r\n                <Box mx='auto' height='50vh' width='1024px' maxWidth='100%'>\r\n                    {this.state.array.map((num, index) => (\r\n                        <Box \r\n                        display='inline-block'\r\n                        width={1/this.state.numRows} \r\n                        key={index}\r\n                        height='100%'\r\n                        position='relative'\r\n                        >\r\n                            <Box\r\n                                className='bar'\r\n                                position='absolute'\r\n                                bottom={0}\r\n                                width='100%'\r\n                                style={{\r\n                                    height: `${num/1024*100}%`,\r\n                                    backgroundColor: BAR_COLOR\r\n                                }}></Box>\r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n        window.addEventListener('resize', () => this.handleResize());\r\n        document.addEventListener('keydown', (event) => this.escapeAnimation(event));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', () => this.handleResize());\r\n        document.removeEventListener('keydown', (event) => this.escapeAnimation(event));\r\n    }\r\n\r\n    handleResize() {\r\n        if(this.state.isLandscape !== (window.innerWidth > window.innerHeight)) {\r\n            this.setState({numRows: 64, algorithm: BUBBLE_SORT, sorting: false});\r\n            for(let i = 0; i < timeouts.length; i++) {\r\n                clearTimeout(timeouts[i]);\r\n            }\r\n            timeouts = [];\r\n            this.resetArray();\r\n        }\r\n        this.setState({isLandscape: window.innerWidth > window.innerHeight});\r\n    }\r\n\r\n    changeAlgorithm(event) {\r\n        this.setState({algorithm: event.target.value});\r\n    }\r\n\r\n    escapeAnimation(event) {\r\n        if(event.key === 'Escape' && this.state.sorting) {\r\n            for(let i = 0; i < timeouts.length; i++) {\r\n                clearTimeout(timeouts[i]);\r\n            }\r\n            timeouts = [];\r\n            this.state.array.sort((a, b) => a - b);\r\n            let arrayOfBars = document.getElementsByClassName('bar');\r\n            for(let i = 0; i < arrayOfBars.length; i++) {\r\n                arrayOfBars[i].style.height = `${this.state.array[i]*100/MAX_HEIGHT}%`\r\n                arrayOfBars[i].style.backgroundColor = SORTED_COLOR;\r\n            }\r\n            this.setState({sorting: false});\r\n        }\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < this.state.numRows; i++)\r\n            array.push(randomIntOnInterval(64, 1024));\r\n        this.setState({array})\r\n        let arrayOfBars = document.getElementsByClassName('bar');\r\n        for(let i = 0; i < arrayOfBars.length; i++)\r\n            arrayOfBars[i].style.backgroundColor = BAR_COLOR;\r\n    }\r\n\r\n    sort() {\r\n        // Enter sorting state\r\n        this.setState({sorting: true});\r\n        // Make sure all bars start off neutral colored\r\n        let arrayOfBars = document.getElementsByClassName('bar');\r\n        for(let i = 0; i < arrayOfBars.length; i++)\r\n            arrayOfBars[i].style.backgroundColor = BAR_COLOR;\r\n        switch(this.state.algorithm) {\r\n            default:\r\n                console.log(\"Oopsy doopsy that hasn't been implemented yet\");\r\n                this.setState({sorting: false});\r\n                break;\r\n            case BUBBLE_SORT:\r\n                let bubbleAnimations = getBubbleSortAnimations(this.state.array);\r\n                this.animate(bubbleAnimations, arrayOfBars, 0.3, 0.8, N_SQUARED);\r\n                break;\r\n            case INSERTION_SORT:\r\n                let insertionAnimations = getInsertionSortAnimations(this.state.array);\r\n                this.animate(insertionAnimations, arrayOfBars, 1, 0.8, N_SQUARED);\r\n                break;\r\n            case MERGE_SORT:\r\n                let mergeAnimations = getMergeSortAnimations(this.state.array);\r\n                this.animate(mergeAnimations, arrayOfBars, 2, 1, N_LOG_N);\r\n                break;\r\n            case QUICK_SORT:\r\n                console.log(getQuickSortArray(this.state.array));\r\n                let quickAnimations = getQuickSortAnimations(this.state.array);\r\n                this.animate(quickAnimations, arrayOfBars, 2, 1, N_LOG_N);\r\n                break;\r\n        }\r\n    }\r\n\r\n    animate(animations, arrayOfBars, delay, exponent, efficiency) {\r\n        let processingTime = animations.length/ANIMATIONS_PER_MS;\r\n        let scaleFactor = MAX_ROWS/this.state.numRows;\r\n        let timeFactor;\r\n        switch(efficiency) {\r\n            // Defaults to O(n^2) efficiency\r\n            case N_SQUARED:\r\n            default:\r\n                timeFactor = Math.pow(scaleFactor*scaleFactor, exponent);\r\n                break;\r\n            case N_LOG_N:\r\n                timeFactor = Math.pow(scaleFactor*Math.log(MAX_ROWS)/ Math.log(this.state.numRows), exponent);\r\n                break;\r\n        }\r\n\r\n        for(let i = 0; i < animations.length; i++) {\r\n            let[indices, changes, trueColorFalseHeight] = animations[i];\r\n            if(trueColorFalseHeight) {\r\n                timeouts.push(setTimeout(() => {\r\n                    for(let j = 0; j < indices.length; j++)\r\n                        arrayOfBars[indices[j]].style.backgroundColor = changes[j];\r\n                }, i*delay*timeFactor + processingTime));\r\n            } else {\r\n                timeouts.push(setTimeout(() => {\r\n                    for(let j = 0; j < indices.length; j++)\r\n                        arrayOfBars[indices[j]].style.height = `${changes[j]/MAX_HEIGHT*100}%`;\r\n                }, i*delay*timeFactor + processingTime));\r\n            }\r\n        }\r\n\r\n        // Final sweep of green over sorted array\r\n        for(let i = 0; i < arrayOfBars.length; i++) {\r\n            timeouts.push(setTimeout(() => {\r\n                arrayOfBars[i].style.backgroundColor = SORTED_COLOR;\r\n            }, i*FINAL_PASS_DELAY*scaleFactor + animations.length*delay*timeFactor + processingTime));\r\n        }\r\n        // Re-enable buttons\r\n        timeouts.push(setTimeout(() => {\r\n            this.state.array.sort((a, b) => a - b);\r\n            this.setState({sorting: false});\r\n            timeouts = [];\r\n        }, arrayOfBars.length*FINAL_PASS_DELAY*scaleFactor + animations.length*delay*timeFactor + processingTime));\r\n    }\r\n}\r\n\r\nfunction randomIntOnInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\nimport Graph from './Visualizer/Graph';\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Graph></Graph>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}