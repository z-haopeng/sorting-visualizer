{"version":3,"sources":["Algorithms/BubbleSort.js","Algorithms/InsertionSort.js","Algorithms/MergeSort.js","Visualizer/Graph.jsx","App.js","serviceWorker.js","index.js"],"names":["swap","array","a","b","length","temp","getMergeSortAnimations","result","slice","animations","mergeAnimationHelper","auxillaryArray","start","end","middle","Math","floor","headOne","headTwo","i","push","COMPARISON_COLOR","BAR_COLOR","SORTED_COLOR","mergeAnimate","timeouts","Graph","props","handleResize","e","state","isLandscape","window","innerWidth","innerHeight","setState","numRows","algorithm","sorting","clearTimeout","resetArray","this","Box","mt","display","flexDirection","mx","justifyContent","Button","variant","startIcon","href","alignItems","p","disabled","color","onClick","InputLabel","shrink","id","Select","labelId","defaultValue","onChange","event","changeAlgorithm","MenuItem","value","sort","m","width","maxWidth","Typography","align","Slider","min","max","step","valueLabelDisplay","onChangeCommitted","val","height","map","num","index","key","position","className","bottom","style","backgroundColor","addEventListener","removeEventListener","target","random","arrayOfBars","document","getElementsByClassName","console","log","bubbleAnimations","j","getBubbleSortAnimations","animateWithSwap","insertionAnimations","getInsertionSortAnimations","mergeAnimations","animateWithMerge","delay","exponent","powerFactor","pow","scaleFactor","processingTime","barOneIdx","barTwoIdx","setTimeout","newColor","timeFactor","changes","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f56e0184.chunk.js","sourcesContent":["export function getBubbleSortArray(array) {\r\n    let result = array.slice(0);\r\n    for(let i = 0; i < result.length-1; i++) {\r\n        for(let j = 0; j < result.length-i-1; j++) {\r\n            if(result[j] > result[j+1]) {\r\n                swap(result, j, j+1);\r\n            }    \r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n    let animations = [];\r\n    let temp = array.slice(0);\r\n    for(let i = 0; i < temp.length-1; i++) {\r\n        for(let j = 0; j < temp.length-i-1; j++) {\r\n            // Blocks of information with three parts: \r\n            // Two indices to consider and whether to change color or swap\r\n            // true: toggle colors, false: swap heights\r\n            animations.push([j, j+1, true]);\r\n            if(temp[j] > temp[j+1]) {\r\n                animations.push([j, j+1, false]);\r\n                swap(temp, j, j+1);\r\n            }\r\n            animations.push([j, j+1, true]);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction swap(array, a, b) {\r\n    if(array != null && a < array.length && b < array.length) {\r\n        let temp = array[a];\r\n        array[a] = array[b];\r\n        array[b] = temp;\r\n    }\r\n}","export function getInsertionSortArray(array) {\r\n    let result = array.slice(0);\r\n    for(let i = 1; i < result.length; i++) {\r\n        let j = i;\r\n        while(j > 0 && result[j-1] > result[j]) {\r\n            swap(result, j-1, j);\r\n            j--;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function getInsertionSortAnimations(array) {\r\n    let animations = [];\r\n    let temp = array.slice(0);\r\n    for(let i = 1; i < temp.length; i++) {\r\n        let j = i;\r\n        animations.push([j-1, j, true]);        // Highlight compared indices\r\n        while(j > 0 && temp[j-1] > temp[j]) {\r\n            animations.push([j-1, j, false]);   // Swap their heights\r\n            animations.push([j-1, j, true]);    // Un-highlight those indices\r\n            swap(temp, j-1, j);\r\n            j--;\r\n            if(j > 0) {\r\n                animations.push([j-1, j, true]);// Highlight the next pair\r\n            }\r\n        }\r\n        if(j > 0) {\r\n            animations.push([j-1, j, true]);    // Un-highlight the final pair\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\n\r\nfunction swap(array, a, b) {\r\n    if(array != null && a < array.length && b < array.length) {\r\n        let temp = array[a];\r\n        array[a] = array[b];\r\n        array[b] = temp;\r\n    }\r\n}","import {BAR_COLOR, COMPARISON_COLOR, SORTED_COLOR} from '../Visualizer/Graph'\r\n\r\nexport function getMergeSortArray(array) {\r\n    let result = array.slice(0);\r\n    let auxillaryArray = array.slice(0);\r\n    mergeSortHelper(result, auxillaryArray, 0, result.length-1);\r\n    return result;\r\n}\r\n\r\nfunction mergeSortHelper(array, auxillaryArray, start, end) {\r\n    if(start === end) {\r\n        return;\r\n    }\r\n    let middle = Math.floor((start+end)/2);\r\n    // end must be at least 1 greater than start here, so divide again\r\n    mergeSortHelper(array, auxillaryArray, start, middle);\r\n    mergeSortHelper(array, auxillaryArray, middle+1, end);\r\n    merge(array, auxillaryArray, start, middle, end);\r\n}\r\n\r\nfunction merge(array, auxillaryArray, start, middle, end) {\r\n    let headOne = start;\r\n    let headTwo = middle+1;\r\n    // The two halves must be in order, so merge them\r\n    for(let i = start; i <= end; i++) {\r\n        // Four possibilities:\r\n        // The first list has already been entirely merged\r\n        if(headOne > middle) {\r\n            auxillaryArray[i] = array[headTwo];\r\n            headTwo++;\r\n        // The second list has already been entirely merged\r\n        } else if(headTwo > end) {\r\n            auxillaryArray[i] = array[headOne];\r\n            headOne++;\r\n        // The head of the first list should go in next\r\n        } else if(array[headOne] < array[headTwo]) {\r\n            auxillaryArray[i] = array[headOne];\r\n            headOne++;\r\n        // The head of the second list should go in next\r\n        } else {\r\n            auxillaryArray[i] = array[headTwo];\r\n            headTwo++;\r\n        }\r\n    }\r\n    // Copy the merged arrays back into the original\r\n    for(let i = start; i <= end; i++) {\r\n        array[i] = auxillaryArray[i];\r\n    }\r\n}\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    let result = array.slice(0);\r\n    let auxillary = array.slice(0);\r\n    let animations = [];\r\n\r\n    mergeAnimationHelper(result, auxillary, 0, result.length-1, animations);\r\n\r\n    return animations;\r\n}\r\n\r\nfunction mergeAnimationHelper(array, auxillaryArray, start, end, animations) {\r\n    if(start === end) {\r\n        return;\r\n    }\r\n    let middle = Math.floor((start+end)/2);\r\n    // end must be at least 1 greater than start here, so divide again\r\n    mergeAnimationHelper(array, auxillaryArray, start, middle, animations);\r\n    mergeAnimationHelper(array, auxillaryArray, middle+1, end, animations);\r\n    mergeAnimate(array, auxillaryArray, start, middle, end, animations);\r\n}\r\n\r\nfunction mergeAnimate(array, auxillaryArray, start, middle, end, animations) {\r\n    let headOne = start;\r\n    let headTwo = middle+1;\r\n    // The two halves must be in order, so merge them\r\n    for(let i = start; i <= end; i++) {\r\n        // Four possibilities:\r\n        // The first list has already been entirely merged\r\n        if(headOne > middle) {\r\n            animations.push([headTwo, COMPARISON_COLOR, true]);        // Highlight the bar\r\n            animations.push([headTwo, BAR_COLOR, true]);        // Un-highlight the bar\r\n            auxillaryArray[i] = array[headTwo];\r\n            headTwo++;\r\n        // The second list has already been entirely merged\r\n        } else if(headTwo > end) {\r\n            animations.push([headOne, COMPARISON_COLOR, true]);\r\n            animations.push([headOne, BAR_COLOR, true]);\r\n            auxillaryArray[i] = array[headOne];\r\n            headOne++;\r\n        // The head of the first list should go in next\r\n        } else if(array[headOne] < array[headTwo]) {\r\n            animations.push([headOne, COMPARISON_COLOR, true]);\r\n            animations.push([headOne, BAR_COLOR, true]);\r\n            auxillaryArray[i] = array[headOne];\r\n            headOne++;\r\n        // The head of the second list should go in next\r\n        } else {\r\n            animations.push([headTwo, COMPARISON_COLOR, true]);\r\n            animations.push([headTwo, BAR_COLOR, true]);\r\n            auxillaryArray[i] = array[headTwo];\r\n            headTwo++;\r\n        }\r\n    }\r\n    // Copy the merged arrays back into the original\r\n    for(let i = start; i <= end; i++) {\r\n        array[i] = auxillaryArray[i];\r\n        animations.push([i, SORTED_COLOR, true]);\r\n        animations.push([i, array[i], false]);\r\n        animations.push([i, BAR_COLOR, true]);\r\n    }\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\n\r\nimport {getBubbleSortAnimations} from '../Algorithms/BubbleSort';\r\nimport {getInsertionSortAnimations} from '../Algorithms/InsertionSort';\r\nimport {getMergeSortAnimations} from '../Algorithms/MergeSort';\r\n\r\nexport const BAR_COLOR = 'rgb(129, 212, 250)';\r\nexport const COMPARISON_COLOR = 'rgb(156, 39, 176)';\r\nexport const SORTED_COLOR = 'rgb(0, 200, 83)';\r\nconst FINAL_PASS_DELAY = 1.5;\r\nconst ANIMATIONS_PER_MS = 25;\r\n\r\nconst BUBBLE_SORT = 0;\r\nconst INSERTION_SORT = 1;\r\nconst MERGE_SORT = 2;\r\n\r\nvar timeouts = [];\r\n\r\nexport default class Graph extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            array: [], \r\n            numRows: 64, \r\n            algorithm: BUBBLE_SORT,\r\n            isLandscape: window.innerWidth > window.innerHeight,\r\n            sorting: false};\r\n    }\r\n    \r\n    render() {\r\n        if(this.state.isLandscape)\r\n            return(\r\n                <div>\r\n                    <Box mt={1} display='flex' flexDirection='column' mx='auto'>\r\n                        <Box display='flex' justifyContent='center'>\r\n                            <Button variant='outlined' startIcon={<GitHubIcon />} href='https://github.com/z-haopeng/sorting-visualizer'>View On GitHub</Button>\r\n                        </Box>\r\n                        <Box display='flex' justifyContent='center' alignItems='flex-end'>\r\n                            {/*Button to re-randomize numbers*/}\r\n                            <Box p={1}>\r\n                                <Button disabled={this.state.sorting} variant='contained' color='primary' onClick={() => this.resetArray()}>Randomize</Button>\r\n                            </Box>  \r\n                            <Box p={1} display='flex' flexDirection='column'>\r\n                                <InputLabel shrink id='algorithmLabel'>Algorithm</InputLabel>\r\n                                <Select disabled={this.state.sorting} labelId='algorithmLabel' defaultValue={BUBBLE_SORT} onChange={(event) => this.changeAlgorithm(event)}>\r\n                                    <MenuItem value={BUBBLE_SORT}>Bubble Sort</MenuItem>\r\n                                    <MenuItem value={INSERTION_SORT}>Insertion Sort</MenuItem>\r\n                                    <MenuItem value={MERGE_SORT}>Merge Sort</MenuItem>\r\n                                </Select>\r\n                            </Box>\r\n                            {/*Button to initiate sort*/}\r\n                            <Box p={1}>  \r\n                                <Button disabled={this.state.sorting} variant='contained' color='secondary' onClick={() => this.sort()}>Sort!</Button>\r\n                            </Box>  \r\n                        </Box>\r\n                        {/*Slider to control how many numbers to sort*/}\r\n                        <Box mx='auto' m={1} width='512px' maxWidth='75%'>\r\n                            <Typography align='left'>Size of Array</Typography>\r\n                            <Slider disabled={this.state.sorting} min={8} max={256} step={8} defaultValue={64} valueLabelDisplay='auto'\r\n                            onChangeCommitted={ (e, val) => {\r\n                                this.setState({numRows: val});\r\n                                this.resetArray();\r\n                            }}></Slider>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box mx='auto' height='50vh' width='1024px' maxWidth='100%'>\r\n                        {this.state.array.map((num, index) => (\r\n                            <Box \r\n                            display='inline-block'\r\n                            width={1/this.state.numRows} \r\n                            key={index}\r\n                            height='100%'\r\n                            position='relative'\r\n                            >\r\n                                <Box\r\n                                    className='bar'\r\n                                    position='absolute'\r\n                                    bottom={0}\r\n                                    width='100%'\r\n                                    style={{\r\n                                        height: `${num/10.24}%`,\r\n                                        backgroundColor: BAR_COLOR\r\n                                    }}></Box>\r\n                            </Box>\r\n                        ))}\r\n                    </Box>\r\n                </div>\r\n            );\r\n\r\n        return( \r\n            <div>\r\n                <Box mt={1} display='flex' flexDirection='column' mx='auto'>\r\n                    <Box display='flex' justifyContent='center'>\r\n                        <Button variant='outlined' startIcon={<GitHubIcon />} href='https://github.com/z-haopeng/sorting-visualizer'>View On GitHub</Button>\r\n                    </Box>\r\n                    <Box display='flex' justifyContent='center'> \r\n                        {/*Button to re-randomize numbers*/}\r\n                        <Box p={1}>\r\n                            <Button disabled={this.state.sorting} variant='contained' color='primary' onClick={() => this.resetArray()}>Randomize</Button>\r\n                        </Box>  \r\n                        {/*Button to initiate sort*/}\r\n                        <Box p={1}>  \r\n                            <Button disabled={this.state.sorting} variant='contained' color='secondary' onClick={() => this.sort()}>Sort!</Button>\r\n                        </Box>     \r\n                    </Box>\r\n                    <Box display='flex' justifyContent='center'>\r\n                        <Box display='flex' flexDirection='column'>\r\n                            <InputLabel shrink id='algorithmLabel'>Algorithm</InputLabel>\r\n                            <Select disabled={this.state.sorting} labelId='algorithmLabel' defaultValue={BUBBLE_SORT} onChange={(event) => this.changeAlgorithm(event)}>\r\n                                <MenuItem value={BUBBLE_SORT}>Bubble Sort</MenuItem>\r\n                                <MenuItem value={INSERTION_SORT}>Insertion Sort</MenuItem>\r\n                                <MenuItem value={MERGE_SORT}>Merge Sort</MenuItem>\r\n                            </Select>\r\n                        </Box>\r\n                    </Box>\r\n                    {/*Slider to control how many numbers to sort*/}\r\n                    <Box mx='auto' m={1} width='512px' maxWidth='75%'>\r\n                        <Typography align='left'>Size of Array</Typography>\r\n                        <Slider disabled={this.state.sorting} min={8} max={256} step={8} defaultValue={64} valueLabelDisplay='auto'\r\n                        onChangeCommitted={ (e, val) => {\r\n                            this.setState({numRows: val});\r\n                            this.resetArray();\r\n                        }}></Slider>\r\n                    </Box>\r\n                </Box>             \r\n                <Box mx='auto' height='50vh' width='1024px' maxWidth='100%'>\r\n                    {this.state.array.map((num, index) => (\r\n                        <Box \r\n                        display='inline-block'\r\n                        width={1/this.state.numRows} \r\n                        key={index}\r\n                        height='100%'\r\n                        position='relative'\r\n                        >\r\n                            <Box\r\n                                className='bar'\r\n                                position='absolute'\r\n                                bottom={0}\r\n                                width='100%'\r\n                                style={{\r\n                                    height: `${num/10.24}%`,\r\n                                    backgroundColor: BAR_COLOR\r\n                                }}></Box>\r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    handleResize = e => {\r\n        if(this.state.isLandscape !== (window.innerWidth > window.innerHeight)) {\r\n            this.setState({numRows: 64, algorithm: BUBBLE_SORT, sorting: false});\r\n            for(let i = 0; i < timeouts.length; i++) {\r\n                clearTimeout(timeouts[i]);\r\n            }\r\n            timeouts = [];\r\n            this.resetArray();\r\n        }\r\n        this.setState({isLandscape: window.innerWidth > window.innerHeight});\r\n    }\r\n\r\n    changeAlgorithm(event) {\r\n        this.setState({algorithm: event.target.value});\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < this.state.numRows; i++)\r\n            array.push(randomIntOnInterval(64, 1024));\r\n        this.setState({array})\r\n        let arrayOfBars = document.getElementsByClassName('bar');\r\n        for(let i = 0; i < arrayOfBars.length; i++)\r\n            arrayOfBars[i].style.backgroundColor = BAR_COLOR;\r\n    }\r\n\r\n    sort() {\r\n        // Enter sorting state\r\n        this.setState({sorting: true});\r\n        // Make sure all bars start off neutral colored\r\n        let arrayOfBars = document.getElementsByClassName('bar');\r\n        for(let i = 0; i < arrayOfBars.length; i++)\r\n            arrayOfBars[i].style.backgroundColor = BAR_COLOR;\r\n        switch(this.state.algorithm) {\r\n            default:\r\n                console.log(\"Oopsy doopsy that hasn't been implemented yet\");\r\n                this.setState({sorting: false});\r\n                break;\r\n            case BUBBLE_SORT:\r\n                let bubbleAnimations = getBubbleSortAnimations(this.state.array);\r\n                this.animateWithSwap(bubbleAnimations, arrayOfBars, 0.3, 1.8);\r\n                break;\r\n            case INSERTION_SORT:\r\n                let insertionAnimations = getInsertionSortAnimations(this.state.array);\r\n                this.animateWithSwap(insertionAnimations, arrayOfBars, 1, 1.5);\r\n                break;\r\n            case MERGE_SORT:\r\n                let mergeAnimations = getMergeSortAnimations(this.state.array);\r\n                this.animateWithMerge(mergeAnimations, arrayOfBars, 2, 1);\r\n                break;\r\n        }\r\n    }\r\n\r\n    // Animations with format [number, number, boolean]\r\n    // Use for algorithms that compare and swap in-place\r\n    // Bubble sort, Insertion sort, etc.\r\n    animateWithSwap(animations, arrayOfBars, delay, exponent) {\r\n        let powerFactor = Math.pow(256/this.state.numRows, exponent);\r\n        let scaleFactor = 256/this.state.numRows;\r\n        let processingTime = animations.length/ANIMATIONS_PER_MS;\r\n\r\n        for(let i = 0; i < animations.length; i++) {\r\n            // Indices of bars to process and whether to toggle color or swap\r\n            let [barOneIdx, barTwoIdx, toggleColor] = animations[i];\r\n            // Schedule color changes and swaps in order\r\n            // Delay duration scales with power function\r\n            // Essentially, a higher exponent slows smaller arrays down more\r\n            // If exponent is 2 and efficiency is O(n^2), all size arrays will take the same time to sort\r\n            // An exponent of 0 won't slow down smaller arrays at all\r\n            // Max size (256) arrays are unaffected by exponent\r\n            if(toggleColor) {\r\n                timeouts.push(setTimeout(() => {\r\n                    let newColor = arrayOfBars[barOneIdx].style.backgroundColor === COMPARISON_COLOR ? BAR_COLOR : COMPARISON_COLOR;\r\n                    arrayOfBars[barOneIdx].style.backgroundColor = newColor;\r\n                    arrayOfBars[barTwoIdx].style.backgroundColor = newColor;\r\n                }, i * delay * powerFactor + processingTime));\r\n            } else {\r\n                timeouts.push(setTimeout(() => {\r\n                    let temp = arrayOfBars[barOneIdx].style.height;\r\n                    arrayOfBars[barOneIdx].style.height = arrayOfBars[barTwoIdx].style.height;\r\n                    arrayOfBars[barTwoIdx].style.height = temp;\r\n                }, i * delay * powerFactor + processingTime));\r\n            }\r\n        }\r\n        // Sweeping animation to turn all bars green after all swaps completed\r\n        // Uses a direct proportion instead of power function so the screen is filled at a constant speed\r\n        for(let i = 0; i < arrayOfBars.length; i++) {\r\n            timeouts.push(setTimeout(() => {\r\n                arrayOfBars[i].style.backgroundColor = SORTED_COLOR;\r\n            }, (i*FINAL_PASS_DELAY*scaleFactor) + (animations.length*delay*powerFactor) + processingTime));\r\n        }\r\n        // Re-enable buttons and update state array to match the sorted one after everything is complete\r\n        // Slightly cheating by using built-in sorting algorithm, but whatever we already did the important part\r\n        timeouts.push(setTimeout(() => {\r\n            this.state.array.sort((a, b) => a - b);\r\n            this.setState({sorting: false});\r\n            timeouts = [];\r\n        }, (arrayOfBars.length*FINAL_PASS_DELAY*scaleFactor) + (animations.length*delay*powerFactor) + processingTime));\r\n    }\r\n\r\n    animateWithMerge(animations, arrayOfBars, delay, exponent) {\r\n        let processingTime = animations.length/ANIMATIONS_PER_MS;\r\n        let scaleFactor = 256/this.state.numRows;\r\n        let timeFactor = Math.pow(scaleFactor * Math.log(256) / Math.log(this.state.numRows), exponent);\r\n\r\n        for(let i = 0; i < animations.length; i++) {\r\n            let [index, changes, toggleColor] = animations[i];\r\n\r\n            if(toggleColor) {\r\n                timeouts.push(setTimeout(() => {\r\n                    arrayOfBars[index].style.backgroundColor = changes;\r\n                }, i*timeFactor*delay + processingTime));\r\n            } else {\r\n                timeouts.push(setTimeout(() => {\r\n                    arrayOfBars[index].style.height = `${changes*100/1024}%`;\r\n                }, i*timeFactor*delay + processingTime));\r\n            }\r\n            /*\r\n            if(i % 3 === 0) {\r\n                timeouts.push(setTimeout(() => {\r\n                    let [barOneIdx, barTwoIdx] = animations[i];\r\n                    arrayOfBars[barOneIdx].style.backgroundColor = COMPARISON_COLOR;\r\n                    arrayOfBars[barTwoIdx].style.backgroundColor = COMPARISON_COLOR;\r\n                }, i*timeFactor*delay + processingTime));\r\n            } else if(i % 3 === 1) {\r\n                timeouts.push(setTimeout(() => {\r\n                    let [barOneIdx, barTwoIdx] = animations[i];\r\n                    arrayOfBars[barOneIdx].style.backgroundColor = BAR_COLOR;\r\n                    arrayOfBars[barTwoIdx].style.backgroundColor = BAR_COLOR;\r\n                }, i*timeFactor*delay + processingTime));\r\n            } else {\r\n                timeouts.push(setTimeout(() => {\r\n                    let [barIdx, newHeight] = animations[i];\r\n                    arrayOfBars[barIdx].style.height = `${newHeight/10.24}%`;\r\n                }, i*timeFactor*delay + processingTime));\r\n            }*/\r\n        }\r\n\r\n        // Final sweep of green over sorted array\r\n        for(let i = 0; i < arrayOfBars.length; i++) {\r\n            timeouts.push(setTimeout(() => {\r\n                arrayOfBars[i].style.backgroundColor = SORTED_COLOR;\r\n            }, i*FINAL_PASS_DELAY*scaleFactor + animations.length*delay*timeFactor + processingTime));\r\n        }\r\n        // Re-enable buttons\r\n        timeouts.push(setTimeout(() => {\r\n            this.state.array.sort((a, b) => a - b);\r\n            this.setState({sorting: false});\r\n            timeouts = [];\r\n        }, arrayOfBars.length*FINAL_PASS_DELAY*scaleFactor + animations.length*delay*timeFactor + processingTime));\r\n    }\r\n}\r\n\r\nfunction randomIntOnInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\nimport Graph from './Visualizer/Graph';\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Graph></Graph>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}